name: AI API Key Scanner - Manual Scan

# 仅手动触发
on:
  workflow_dispatch:
    inputs:
      scan_type:
        description: '扫描类型'
        required: true
        type: choice
        options:
          - 'auto - 自动搜索AI项目'
          - 'user - 扫描指定用户'
          - 'org - 扫描指定组织'
          - 'repo - 扫描单个仓库'
      
      target:
        description: '扫描目标（用户名/组织名/仓库全名，auto模式时可留空）'
        required: false
        type: string
        default: ''
      
      max_repos:
        description: '最大扫描仓库数（仅auto模式有效）'
        required: false
        type: number
        default: 50
      
      create_issue:
        description: '发现问题时是否创建Issue'
        required: false
        type: boolean
        default: true

# 添加权限设置
permissions:
  contents: write  # 允许提交代码
  issues: write    # 允许创建 Issue

jobs:
  manual-scan:
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 检出代码
        uses: actions/checkout@v4
      
      - name: 🐍 设置 Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      
      - name: 📦 安装依赖
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: ⚙️ 配置环境
        run: |
          echo "GITHUB_TOKEN=${{ secrets.GH_SCAN_TOKEN }}" > .env
          echo "OUTPUT_DIR=./scan_reports" >> .env
          mkdir -p scan_reports
      
      - name: 🔍 执行扫描 - Auto模式
        if: startsWith(github.event.inputs.scan_type, 'auto')
        run: |
          echo "执行自动扫描，最多扫描 ${{ github.event.inputs.max_repos }} 个仓库"
          python scan_github.py --auto --max-repos ${{ github.event.inputs.max_repos }}
      
      - name: 🔍 执行扫描 - User模式
        if: startsWith(github.event.inputs.scan_type, 'user')
        run: |
          echo "扫描用户: ${{ github.event.inputs.target }}"
          python scan_github.py --user "${{ github.event.inputs.target }}"
      
      - name: 🔍 执行扫描 - Org模式
        if: startsWith(github.event.inputs.scan_type, 'org')
        run: |
          echo "扫描组织: ${{ github.event.inputs.target }}"
          python scan_github.py --org "${{ github.event.inputs.target }}"
      
      - name: 🔍 执行扫描 - Repo模式
        if: startsWith(github.event.inputs.scan_type, 'repo')
        run: |
          echo "扫描仓库: ${{ github.event.inputs.target }}"
          python scan_github.py --repo "${{ github.event.inputs.target }}"
      
      - name: 📊 生成扫描摘要
        if: always()
        run: |
          echo "# 🔍 扫描完成" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**扫描类型**: ${{ github.event.inputs.scan_type }}" >> $GITHUB_STEP_SUMMARY
          echo "**扫描目标**: ${{ github.event.inputs.target }}" >> $GITHUB_STEP_SUMMARY
          echo "**执行时间**: $(date)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ -f scan_reports/*.txt ]; then
            echo "## 📄 扫描结果" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            head -n 80 scan_reports/*.txt >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
          fi
      
      - name: 📤 上传报告
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: manual-scan-report-${{ github.run_number }}
          path: scan_reports/
          retention-days: 90
          if-no-files-found: ignore
      
      - name: 💾 提交扫描历史和报告
        if: always()
        run: |
          git config user.name "gaocaipeng"
          git config user.email "1402055309@qq.com"
          
          # 添加扫描历史
          git add scan_history/
          
          # 添加扫描报告
          if [ -d "scan_reports" ] && [ "$(ls -A scan_reports 2>/dev/null)" ]; then
            git add scan_reports/
            echo "✅ 发现扫描报告，将一并提交"
          fi
          
          # 检查是否有更改
          if git diff --cached --quiet; then
            echo "没有新的扫描历史或报告"
          else
            # 统计信息
            HISTORY_CHANGED=$(git diff --cached --name-only | grep "scan_history/" | wc -l | tr -d ' ')
            REPORTS_CHANGED=$(git diff --cached --name-only | grep "scan_reports/" | wc -l | tr -d ' ')
            
            # 提交消息
            COMMIT_MSG="📝 更新扫描数据 [skip ci]"
            if [ "$HISTORY_CHANGED" -gt 0 ] && [ "$REPORTS_CHANGED" -gt 0 ]; then
              COMMIT_MSG="📝 更新扫描历史和报告 [skip ci]"
            elif [ "$REPORTS_CHANGED" -gt 0 ]; then
              COMMIT_MSG="📄 添加扫描报告 [skip ci]"
            fi
            
            git commit -m "$COMMIT_MSG"
            
            # 同步远程更改，避免并发推送冲突
            git pull --rebase origin main || {
              echo "⚠️ Rebase 冲突，尝试使用本地版本"
              git rebase --abort
              git pull --rebase --strategy-option=ours origin main
            }
            
            git push
            echo "✅ 已提交: 历史文件 $HISTORY_CHANGED 个, 报告文件 $REPORTS_CHANGED 个"
          fi
      
      - name: 🔔 分析结果
        id: analyze
        if: always()
        run: |
          if [ -f scan_reports/*.txt ]; then
            FINDINGS=$(grep "发现的问题总数:" scan_reports/*.txt | grep -oE '[0-9]+' || echo "0")
            echo "发现 $FINDINGS 个潜在问题"
            echo "findings_count=$FINDINGS" >> $GITHUB_OUTPUT
            
            if [ "$FINDINGS" -gt 0 ]; then
              echo "has_findings=true" >> $GITHUB_OUTPUT
            else
              echo "has_findings=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "findings_count=0" >> $GITHUB_OUTPUT
            echo "has_findings=false" >> $GITHUB_OUTPUT
          fi
      
      - name: 📢 创建告警Issue
        if: |
          always() && 
          github.event.inputs.create_issue == 'true' && 
          steps.analyze.outputs.has_findings == 'true'
        uses: actions/github-script@v7
        env:
          FINDINGS_COUNT: ${{ steps.analyze.outputs.findings_count }}
          SCAN_TYPE: ${{ github.event.inputs.scan_type }}
          SCAN_TARGET: ${{ github.event.inputs.target }}
        with:
          script: |
            const fs = require('fs');
            const reportDir = 'scan_reports';
            const findingsCount = process.env.FINDINGS_COUNT;
            const scanType = process.env.SCAN_TYPE;
            const scanTarget = process.env.SCAN_TARGET;
            
            if (fs.existsSync(reportDir)) {
              const files = fs.readdirSync(reportDir);
              if (files.length > 0) {
                const reportPath = `${reportDir}/${files[0]}`;
                const content = fs.readFileSync(reportPath, 'utf8');
                const preview = content.split('\n').slice(0, 120).join('\n');
                
                const issueTitle = `🚨 [手动扫描] 发现 ${findingsCount} 个潜在密钥泄露`;
                const issueBody = [
                  '# 🔍 手动扫描报告',
                  '',
                  '## 扫描信息',
                  '',
                  `- 扫描类型: ${scanType}`,
                  `- 扫描目标: ${scanTarget}`,
                  `- 执行时间: ${new Date().toLocaleString('zh-CN')}`,
                  `- 发现问题数: ${findingsCount}`,
                  `- Workflow Run: [#${context.runNumber}](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})`,
                  '',
                  '## 📄 报告预览',
                  '',
                  '```',
                  preview,
                  '```',
                  '',
                  '## 🔗 完整报告',
                  '',
                  `请从 [Artifacts](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}) 下载完整报告。`,
                  '',
                  '## ⚠️ 建议操作',
                  '',
                  '1. 立即检查报告中标记的高置信度问题',
                  '2. 轮换所有泄露的 API 密钥',
                  '3. 使用环境变量或密钥管理服务',
                  '4. 更新 .gitignore 防止未来泄露',
                  '',
                  '---',
                  '*此 Issue 由 GitHub Actions 自动创建*'
                ].join('\n');
                
                await github.rest.issues.create({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  title: issueTitle,
                  body: issueBody,
                  labels: ['security', 'manual-scan', 'needs-review']
                });
              }
            }

